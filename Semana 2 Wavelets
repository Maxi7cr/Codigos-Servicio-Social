import numpy as np
import matplotlib.pyplot as plt
import pywt
# Frecuencia de muestreo y vector de tiempo
fs = 500
# Frecuencia de muestreo en Hz
t = np. linspace(0, 2, 2 * fs, endpoint=False)

signal = np.sin(2 * np.pi * 5 * t) # Señal de 5 Hz con amplitud 1
signal += 0.5 * np.sin(2 * np. pi* 10 * t)# Señal de 10 Hz con amplitud 0.5
signal += 0.3 * np.sin(2 * np.pi* 20 * t)# Señal de 20 Hz con amplitud 0.3
signal += 0.25 * np.sin(2 * np.pi * 50 * t)# Señal de 50 Hz con amplitud 0.25
plt. figure(figsize=(10, 4))
plt.plot(t, signal)
plt. title("Señal compuesta de varias frecuencias(5 Hz, 10 Hz, 20 Hz, 50 Hz)")
plt.xlabel("Tiempo (s)")
plt.ylabel("Amplitud")
plt.grid(True)
plt .show()
# Transformada Wavelet Discreta (DWT)
# Utilizamos el wavelet 'db4' (Daubechies de nivel 4) para la DWT
coeffs = pywt.wavedec(signal, 'db4', level=4)
# Coeficientes de detalle de cada nivel
cA4, cD4, cD3, cD2, cD1 = coeffs

# Graficar coeficientes de la DWT
plt.figure(figsize=(12, 8))
plt.subplot(5, 1, 1)
plt.plot(cA4, color='blue')
plt.title("Coeficiente de Aprôximación de Nivel 4 (DWT)")
plt.subplot(5, 1, 2)
plt.plot(cD4, color='orange')
plt.title("Coeficiente de Detalle de Nivel 4 (DWT)") 
plt.subplot(5, 1, 3)
plt.plot(cD3, color='green' )
plt.title("Coeficiente de Detalle de Nivel 3 (DWT)") 
plt.subplot(5, 1, 4) 
plt.plot(cD2, color='red')
plt.title("Coeficiente de Detalle de Nivel 2 (DWT)") 
plt.subplot(5, 1, 5)
plt.plot(cD1, color='purple')
plt.title("Coeficiente de Detalle de Nivel 1 (DWT)") 
plt.tight_layout()
plt.show()
