import numpy as np
import scipy.io as sio
import scipy.signal as signal
import matplotlib.pyplot as plt

# Especificar la ruta completa del archivo .mat
ruta = r"C:\Users\maxi-\Desktop\UPIITA\SERVICIO\Descargadedatos\files\i-care\2.0\training\0328\0328_002_013_ECG.mat"

# Cargar el archivo .mat
data = sio.loadmat(ruta)

# Inspeccionar las claves del archivo .mat para encontrar la se침al de ECG
print("Claves en el archivo .mat:", data.keys())

# Extraer la se침al de ECG (ajusta la clave si es necesario)
# Si no sabes la clave, revisa la salida de data.keys() y elige la correcta.
ecg_signal = data['val'][0]  # Cambia 'val' por la clave correcta si es diferente

# Frecuencia de muestreo (ajusta si es diferente en tu archivo)
fs = 250  # 250Hz

# Crear el eje de tiempo en segundos
t = np.arange(len(ecg_signal)) / fs

# Filtrar la se침al (pasa bandas entre 0.1 y 50 Hz)
b, a = signal.butter(4, [0.1, 50], btype='bandpass', fs=fs)
ecg_filtrado = signal.filtfilt(b, a, ecg_signal)

# Detectar los picos R
picos_R, _ = signal.find_peaks(ecg_filtrado, height=np.mean(ecg_filtrado), distance=fs/2)

# Graficar el ECG con los picos R detectados
plt.figure(figsize=(10, 4))
plt.plot(t, ecg_filtrado, label="ECG Filtrado")
plt.plot(t[picos_R], ecg_filtrado[picos_R], 'ro', label="Picos R")
plt.xlabel("Tiempo (s)")
plt.ylabel("Amplitud")
plt.legend()
plt.title("Detecci칩n de Picos R")
plt.show()

# Calcular intervalos RR
tiempos_R = t[picos_R]
intervalos_RR = np.diff(tiempos_R) * 1000  # Convertir a milisegundos

# Graficar los intervalos RR
plt.figure(figsize=(8, 3))
plt.plot(intervalos_RR, marker='o', linestyle='-', label="Intervalos RR (ms)")
plt.ylabel("Tiempo entre latidos (ms)")
plt.xlabel("Latido")
plt.legend()
plt.title("Variabilidad de la Frecuencia Card칤aca (VFC)")
plt.show()

# Funci칩n para calcular m칠tricas de HRV en el dominio del tiempo
def calcular_hrv_tiempo(intervalos_RR):
    resultados = {}
    resultados['mean_RR'] = np.mean(intervalos_RR)  # Media de los intervalos RR
    resultados['std_RR'] = np.std(intervalos_RR)    # Desviaci칩n est치ndar de los intervalos RR
    resultados['rmssd'] = np.sqrt(np.mean(np.square(np.diff(intervalos_RR))))  # RMSSD
    resultados['nn50'] = np.sum(np.abs(np.diff(intervalos_RR)) > 50)  # N칰mero de pares de intervalos RR consecutivos que difieren en m치s de 50 ms
    resultados['pnn50'] = (resultados['nn50'] / len(intervalos_RR)) * 100  # Porcentaje de nn50
    return resultados

# Funci칩n para calcular m칠tricas de HRV en el dominio de la frecuencia
def calcular_hrv_frecuencia(intervalos_RR, fs=4.0):
    # Interpolaci칩n para obtener una se침al uniformemente muestreada
    tiempo_RR = np.cumsum(intervalos_RR) / 1000.0  # Convertir a segundos
    tiempo_interp = np.arange(tiempo_RR[0], tiempo_RR[-1], 1/fs)
    rr_interp = np.interp(tiempo_interp, tiempo_RR, intervalos_RR)

    # Calcular la transformada de Fourier
    n = len(rr_interp)
    frecuencias = np.fft.rfftfreq(n, d=1/fs)
    espectro = np.abs(np.fft.rfft(rr_interp - np.mean(rr_interp)))

    # Bandas de frecuencia
    vlf_band = (0.0033, 0.04)  # Muy baja frecuencia
    lf_band = (0.04, 0.15)     # Baja frecuencia
    hf_band = (0.15, 0.4)      # Alta frecuencia

    # Calcular la potencia en cada banda
    vlf = np.trapz(espectro[(frecuencias >= vlf_band[0]) & (frecuencias < vlf_band[1])], 
                   frecuencias[(frecuencias >= vlf_band[0]) & (frecuencias < vlf_band[1])])
    lf = np.trapz(espectro[(frecuencias >= lf_band[0]) & (frecuencias < lf_band[1])], 
                  frecuencias[(frecuencias >= lf_band[0]) & (frecuencias < lf_band[1])])
    hf = np.trapz(espectro[(frecuencias >= hf_band[0]) & (frecuencias < hf_band[1])], 
                  frecuencias[(frecuencias >= hf_band[0]) & (frecuencias < hf_band[1])])

    # Calcular la relaci칩n LF/HF
    lf_hf_ratio = lf / hf

    resultados = {
        'vlf': vlf,
        'lf': lf,
        'hf': hf,
        'lf_hf_ratio': lf_hf_ratio
    }
    return resultados

# Calcular m칠tricas de HRV manualmente
resultados_tiempo = calcular_hrv_tiempo(intervalos_RR)
resultados_frecuencia = calcular_hrv_frecuencia(intervalos_RR)

# Mostrar resultados
print("游늵 An치lisis en el Dominio del Tiempo:")
print(resultados_tiempo)

print("\n游늵 An치lisis en el Dominio de la Frecuencia:")
print(resultados_frecuencia)
